


ARM Macro Assembler    Page 1 


    1 00000000         ; ****Your name goes here*******
    2 00000000         ; -5 points if you do not add your name
    3 00000000         ; DHRUV SANDESARA
    4 00000000         ; 70 MINS
    5 00000000         ; This is Exam2_ArrayofStruct 
    6 00000000         ; EE319K Fall 2014 exam2, November 6, 2014
    7 00000000         ; You edit this file only  
    8 00000000                 AREA             Data, ALIGN=4
    9 00000000         
   10 00000000         
   11 00000000                 AREA             |.text|, CODE, READONLY, ALIGN=
2
   12 00000000                 THUMB
   13 00000000         
   14 00000000         ;***************** Linear****************************
   15 00000000         ; Calculate the result of a linear equation y = 16*x-50 
                        
   16 00000000         ; Input parameter: x is unsigned 8 bits
   17 00000000         ; Output parameter: y is unsigned 8 bits
   18 00000000         ; Error conditions: implement ceiling on overflow
   19 00000000         ;                   implement floor on underflow
   20 00000000         ; Test Cases as (Input, Output) pairs: 
   21 00000000         ; (0,0),(3,0),(4,14),(5,30),(11,126),
   22 00000000         ; (15,190),(19,254),(20,255),(100,255),(255,255)
   23 00000000         ; C prototype   uint8_t Linear(uint8_t x){
   24 00000000                 EXPORT           Linear
   25 00000000         Linear
   26 00000000 2804            CMP              R0,#4       ;
   27 00000002 DB06            BLT              LOWER       ;
   28 00000004 2813            CMP              R0,#19      ;
   29 00000006 DC07            BGT              HIGHER      ;
   30 00000008 EA4F 1000       LSL              R0,#4       ;
   31 0000000C F1A0 0032       SUB              R0,#50      ;
   32 00000010 E005            B                LINEARDONE  ;
   33 00000012         
   34 00000012         
   35 00000012         
   36 00000012         LOWER
   37 00000012 F04F 0000       MOV              R0,#0       ;
   38 00000016 E002            B                LINEARDONE  ;
   39 00000018         HIGHER
   40 00000018 F04F 00FF       MOV              R0,#255     ;
   41 0000001C E7FF            B                LINEARDONE  ;
   42 0000001E         ; put your answer here
   43 0000001E         
   44 0000001E         LINEARDONE
   45 0000001E         ; replace this line with your solution
   46 0000001E 4770            BX               LR
   47 00000020         
   48 00000020         ;******************Swap**************************
   49 00000020         ; You are given an 11-element 16-bit array.
   50 00000020         ; Your function should swap the order of the data in the
                        array
   51 00000020         ; Input: pointer to array
   52 00000020         ; Output: none
   53 00000020         ; Error conditions: none
   54 00000020         ; Test Cases:
   55 00000020         ; 1. buf before: -5, 4, 7, 0,-1, 3, 4,-8, 2, 9, 9  
   56 00000020         ;    buf after:  9, 9, 2,-8, 4, 3,-1, 0, 7, 4,-5   



ARM Macro Assembler    Page 2 


   57 00000020         ; 2. buf before: 1, 2, 3, 4, 5, 6, 7, 8, 9, 10,11
   58 00000020         ;    buf after:  11,10, 9, 8, 7, 6, 5, 4, 3, 2, 1
   59 00000020         ; 3. buf before: 1000,2,3,4,5,-1000,7,10000,9,10,0 
   60 00000020         ;    buf after:  0,10,9,10000,7,-1000,5,4,3,2,1000
   61 00000020         ; C prototype   void Swap(int16_t buf[11]){
   62 00000020                 EXPORT           Swap
   63 00000020         Swap
   64 00000020         ; put your answer here
   65 00000020 E92D 1FFE       PUSH             {R1-R12}
   66 00000024 4603            MOV              R3,R0       ; R3 IS OUR NEW POI
                                                            NTER
   67 00000026 F04F 0400       MOV              R4,#0       ; R4 IS THE OFFSET 
                                                            FOR THE 1ST VALUE
   68 0000002A F04F 0614       MOV              R6,#20      ;
   69 0000002E         SWAPLOOP
   70 0000002E EBA6 0504       SUB              R5,R6,R4    ; R5 IS THE ODDSET 
                                                            FOR THE 2ND VALUE
   71 00000032 5F18            LDRSH            R0,[R3,R4]
   72 00000034 5F59            LDRSH            R1,[R3,R5]
   73 00000036 4602            MOV              R2, R0      ; R2 IS THE TEMP LO
                                                            CATION;
   74 00000038 2C0A            CMP              R4,#10
   75 0000003A D004            BEQ              SWAPDONE    ;
   76 0000003C 535A            STRH             R2,[R3,R5]  ;
   77 0000003E 5319            STRH             R1,[R3,R4]  ;
   78 00000040 F104 0402       ADD              R4,#2       ;
   79 00000044 E7F3            B                SWAPLOOP    ;
   80 00000046         
   81 00000046         
   82 00000046         SWAPDONE
   83 00000046 E8BD 1FFE       POP              {R1-R12}
   84 0000004A 4770            BX               LR
   85 0000004C         
   86 0000004C         
   87 0000004C         ;struct LabGrades{
   88 0000004C         ;  int32_t size;
   89 0000004C         ;  int32_t score[10];
   90 0000004C         ;};
   91 0000004C         ;typedef struct LabGrades LabGrades_t;
   92 0000004C         ; *******************Average******************
   93 0000004C         ; You will write this function. 
   94 0000004C         ; The function should take a pointer to a lab grade stru
                       cture and return the average.
   95 0000004C         ; Average can be calculated only if the size is 1 to 10.
                        
   96 0000004C         ; Input:  Pointer to a lab grade structure
   97 0000004C         ; Output: Average of the lab grades
   98 0000004C         ; Error conditions: If the size is outside the range of 
                       1 to 10, return 0.
   99 0000004C         ; test data
  100 0000004C         ; size  score                                  Average
  101 0000004C         ; 10  |  90  90  90  90  90  90  90  90  90  90 | 90
  102 0000004C         ; 5   |  90  91  92  93  94                     | 92
  103 0000004C         ; 1   | 100                                     |100
  104 0000004C         ; 5   |  85  90  100 70 -25                     | 64
  105 0000004C         ; 8   |  -4  -5  -6  -7 -10   1   2   5         | -3
  106 0000004C         ; 0   |                                         |  0
  107 0000004C         ; 255 |                                         |  0
  108 0000004C         ; C prototype   int32_t Average(LabGrades_t *pt){ ; debu



ARM Macro Assembler    Page 3 


                       g this code
  109 0000004C                 EXPORT           Average
  110 0000004C         Average
  111 0000004C         ; put your answer here
  112 0000004C E92D 01FE       PUSH             {R1-R8}
  113 00000050 6803            LDR              R3,[R0]     ; R3 IS OUR SIZE
  114 00000052         ; R2 IS OUR SUM
  115 00000052 F04F 0200       MOV              R2,#0
  116 00000056 461C            MOV              R4,R3       ; R4 IS OUR SIZE TO
                                                             COPY
  117 00000058 F100 0004       ADD              R0,#4       ;
  118 0000005C 2B00            CMP              R3,#0       ;
  119 0000005E D00D            BEQ              AVGERROR
  120 00000060 2B0A            CMP              R3,#10      ;
  121 00000062 DC0B            BGT              AVGERROR    ;
  122 00000064         
  123 00000064         AVGLOOP
  124 00000064 6801            LDR              R1,[R0]     ;
  125 00000066 440A            ADD              R2,R2,R1    ;
  126 00000068 F100 0004       ADD              R0,#4       ;
  127 0000006C F103 33FF       ADD              R3,#-1      ;
  128 00000070 2B00            CMP              R3,#0       ;
  129 00000072 D000            BEQ              AVGNORDONE
  130 00000074 E7F6            B                AVGLOOP
  131 00000076         AVGNORDONE
  132 00000076 FB92 F0F4       SDIV             R0,R2,R4    ;
  133 0000007A E001            B                AVGDONE
  134 0000007C         
  135 0000007C         AVGERROR
  136 0000007C F04F 0000       MOV              R0,#0       ;
  137 00000080         
  138 00000080         AVGDONE
  139 00000080         
  140 00000080         
  141 00000080 E8BD 01FE       POP{R1-R8}                   ; replace this line
                                                             with your solution
                                                            
  142 00000084 4770            BX               LR
  143 00000086         
  144 00000086         ; **************ClassAverage****************
  145 00000086         ;   Find the average of all the lab grades in the class
  146 00000086         ;   Sum up all grades and divide by the number of grades
                       
  147 00000086         ;   Do not sum up student averages and divide by the num
                       ber of students
  148 00000086         ;   if size is 255, it means end of list
  149 00000086         ;   When dividing, do not round, simply divide sum/count
                       
  150 00000086         ; Each Labgrade structure is 44 bytes (4 bytes for size 
                       and 40 bytes for 10 grades)
  151 00000086         ; Input:  array of Grades_t data
  152 00000086         ; Output: the average lab grade
  153 00000086         ; Error conditions: if there are no students or no grade
                       s, return 0
  154 00000086         ;-------------------------------------------------------
                       -----------
  155 00000086         ;Case 1: six students in the class
  156 00000086         ;{{5,{84,90,88,70,-25}},    
  157 00000086         ; {1,{70}},    



ARM Macro Assembler    Page 4 


  158 00000086         ; {9,{90,90,90,90,-90,70,10,10,10}},
  159 00000086         ; {0,{}}, 
  160 00000086         ; {10,{80,80,80,80,80,80,80,80,80,99}}, 
  161 00000086         ; {2,{80,82}},
  162 00000086         ; {255,{}}
  163 00000086         ;}
  164 00000086         ;Class Average = 64; (see handout for explanation)
  165 00000086         ;-------------------------------------------------------
                       -----------
  166 00000086         ;Case 2: three students in the class
  167 00000086         ;{{2,{100,100,}}, 
  168 00000086         ; {1,{95}}, 
  169 00000086         ; {2,{90,90}}, 
  170 00000086         ; {255,{0}}
  171 00000086         ;}
  172 00000086         ;Class Average = (100+100+95+90+90)/5 = 475/5 = 95 
  173 00000086         ;-------------------------------------------------------
                       ------------
  174 00000086         ;Case 3: one student in the class
  175 00000086         ;{{4    ,{-1,-1,-1,-1}},
  176 00000086         ; {255,{0}}
  177 00000086         ;}
  178 00000086         ;Class Average = -1;
  179 00000086         ;
  180 00000086         ;Case 4:    no students at all
  181 00000086         ;{{255,{0}}
  182 00000086         ;}
  183 00000086         ;Class Average = 0; 
  184 00000086         ;-------------------------------------------------------
                       -----------
  185 00000086         ; C prototype   int32_t ClassAverage(LabGrades_t ee319k[
                       ]){
  186 00000086                 EXPORT           ClassAverage
  187 00000086         ClassAverage
  188 00000086         ; put your answer here
  189 00000086 B5FE            PUSH             {R1-R7,LR}
  190 00000088 4601            MOV              R1,R0       ; R1 WILL HVAE OUR 
                                                            POINTER;
  191 0000008A F04F 0200       MOV              R2,#0       ; R2 WILL CONTAIN O
                                                            UR SUM;
  192 0000008E F04F 0300       MOV              R3,#0       ; R3 WILL CONTAIN O
                                                            UR COUNT OF TESTS;
  193 00000092 F04F 0400       MOV              R4,#0       ; R4 WILL BE OUR DE
                                                            LTA
  194 00000096 F04F 0500       MOV              R5,#0       ; WILL BE INNER POI
                                                            NTER
  195 0000009A F04F 0600       MOV              R6,#0       ; R6 WILL BE THE IN
                                                            NER COUNT
  196 0000009E 6808            LDR              R0,[R1]
  197 000000A0 28FF            CMP              R0,#255     ;
  198 000000A2 D01A            BEQ              CAERROR     ;
  199 000000A4         CALOOP
  200 000000A4 6808            LDR              R0,[R1]
  201 000000A6 28FF            CMP              R0,#255     ;
  202 000000A8 D014            BEQ              CANORDONE   ;
  203 000000AA F101 0504       ADD              R5,R1,#4    ;
  204 000000AE 2800            CMP              R0,#0       ;
  205 000000B0 D00B            BEQ              INNERDONE
  206 000000B2 4606            MOV              R6,R0       ; 



ARM Macro Assembler    Page 5 


  207 000000B4         CAINNER
  208 000000B4 5928            LDR              R0,[R5,R4]  ;
  209 000000B6 4402            ADD              R2,R2,R0    ;
  210 000000B8 F103 0301       ADD              R3,#1       ;
  211 000000BC F104 0404       ADD              R4,#4       ;
  212 000000C0 F106 36FF       ADD              R6,#-1      ;
  213 000000C4 2E00            CMP              R6,#0       ;
  214 000000C6 D000            BEQ              INNERDONE   ;
  215 000000C8 E7F4            B                CAINNER     ;
  216 000000CA         
  217 000000CA         
  218 000000CA         
  219 000000CA         INNERDONE
  220 000000CA         
  221 000000CA F101 012C       ADD              R1,#44      ;
  222 000000CE F04F 0400       MOV              R4,#0       ;
  223 000000D2 E7E7            B                CALOOP
  224 000000D4         
  225 000000D4         
  226 000000D4         
  227 000000D4         
  228 000000D4         
  229 000000D4         CANORDONE
  230 000000D4 FB92 F0F3       SDIV             R0,R2,R3    ;
  231 000000D8 E000            B                CADONE      ;
  232 000000DA         
  233 000000DA         
  234 000000DA         
  235 000000DA         CAERROR
  236 000000DA 4618            MOV              R0,R3       ;
  237 000000DC         
  238 000000DC         CADONE
  239 000000DC         
  240 000000DC E8BD 40FE       POP              {R1-R7,LR}
  241 000000E0         
  242 000000E0         ; replace this line with your solution
  243 000000E0 4770            BX               LR
  244 000000E2         
  245 000000E2         
  246 000000E2                 END
Command Line: --debug --xref --cpu=Cortex-M3 --apcs=interwork --depend=.\exam2.
d -o.\exam2.o -IC:\Keil\ARM\RV31\INC -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\
Inc\Luminary --predefine="__EVAL SETA 1" --list=.\exam2.lst Exam2.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

Data 00000000

Symbol: Data
   Definitions
      At line 8 in file Exam2.s
   Uses
      None
Comment: Data unused
1 symbol



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

.text 00000000

Symbol: .text
   Definitions
      At line 11 in file Exam2.s
   Uses
      None
Comment: .text unused
AVGDONE 00000080

Symbol: AVGDONE
   Definitions
      At line 138 in file Exam2.s
   Uses
      At line 133 in file Exam2.s
Comment: AVGDONE used once
AVGERROR 0000007C

Symbol: AVGERROR
   Definitions
      At line 135 in file Exam2.s
   Uses
      At line 119 in file Exam2.s
      At line 121 in file Exam2.s

AVGLOOP 00000064

Symbol: AVGLOOP
   Definitions
      At line 123 in file Exam2.s
   Uses
      At line 130 in file Exam2.s
Comment: AVGLOOP used once
AVGNORDONE 00000076

Symbol: AVGNORDONE
   Definitions
      At line 131 in file Exam2.s
   Uses
      At line 129 in file Exam2.s
Comment: AVGNORDONE used once
Average 0000004C

Symbol: Average
   Definitions
      At line 110 in file Exam2.s
   Uses
      At line 109 in file Exam2.s
Comment: Average used once
CADONE 000000DC

Symbol: CADONE
   Definitions
      At line 238 in file Exam2.s
   Uses
      At line 231 in file Exam2.s
Comment: CADONE used once
CAERROR 000000DA




ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

Symbol: CAERROR
   Definitions
      At line 235 in file Exam2.s
   Uses
      At line 198 in file Exam2.s
Comment: CAERROR used once
CAINNER 000000B4

Symbol: CAINNER
   Definitions
      At line 207 in file Exam2.s
   Uses
      At line 215 in file Exam2.s
Comment: CAINNER used once
CALOOP 000000A4

Symbol: CALOOP
   Definitions
      At line 199 in file Exam2.s
   Uses
      At line 223 in file Exam2.s
Comment: CALOOP used once
CANORDONE 000000D4

Symbol: CANORDONE
   Definitions
      At line 229 in file Exam2.s
   Uses
      At line 202 in file Exam2.s
Comment: CANORDONE used once
ClassAverage 00000086

Symbol: ClassAverage
   Definitions
      At line 187 in file Exam2.s
   Uses
      At line 186 in file Exam2.s
Comment: ClassAverage used once
HIGHER 00000018

Symbol: HIGHER
   Definitions
      At line 39 in file Exam2.s
   Uses
      At line 29 in file Exam2.s
Comment: HIGHER used once
INNERDONE 000000CA

Symbol: INNERDONE
   Definitions
      At line 219 in file Exam2.s
   Uses
      At line 205 in file Exam2.s
      At line 214 in file Exam2.s

LINEARDONE 0000001E

Symbol: LINEARDONE
   Definitions



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Relocatable symbols

      At line 44 in file Exam2.s
   Uses
      At line 32 in file Exam2.s
      At line 38 in file Exam2.s
      At line 41 in file Exam2.s

LOWER 00000012

Symbol: LOWER
   Definitions
      At line 36 in file Exam2.s
   Uses
      At line 27 in file Exam2.s
Comment: LOWER used once
Linear 00000000

Symbol: Linear
   Definitions
      At line 25 in file Exam2.s
   Uses
      At line 24 in file Exam2.s
Comment: Linear used once
SWAPDONE 00000046

Symbol: SWAPDONE
   Definitions
      At line 82 in file Exam2.s
   Uses
      At line 75 in file Exam2.s
Comment: SWAPDONE used once
SWAPLOOP 0000002E

Symbol: SWAPLOOP
   Definitions
      At line 69 in file Exam2.s
   Uses
      At line 79 in file Exam2.s
Comment: SWAPLOOP used once
Swap 00000020

Symbol: Swap
   Definitions
      At line 63 in file Exam2.s
   Uses
      At line 62 in file Exam2.s
Comment: Swap used once
20 symbols
352 symbols in table
