


ARM Macro Assembler    Page 1 


    1 00000000         ;This is Exam2_Mode
    2 00000000         ;Your name goes here
    3 00000000         ;DHRUV SANDESARA
    4 00000000         ;35 MINS
    5 00000000         ;You edit this file only
    6 00000000                 AREA             Data
    7 00000000 00 00 00 
              00 00 00 
              00 00 00 
              00       Array1  SPACE            10
    8 0000000A         
    9 0000000A                 AREA             |.text|, CODE, READONLY, ALIGN=
2
   10 00000000                 THUMB
   11 00000000         ;***** Clear subroutine*********************
   12 00000000         ;Input:   R0 has a pointer to an array of 8-bit numbers 
                       that should be initialized
   13 00000000         ;Output:  No formal return parameter 
   14 00000000         ;Make all ten entries of the array equal to zero
   15 00000000         ;Each element of the array is stored in one 8-bit byte, 
                       located at sequential memory addresses.
   16 00000000         ;Invariables: You must not permanently modify registers 
                       R4 to R11
   17 00000000         ;Error conditions: none
   18 00000000                 EXPORT           Clear
   19 00000000         Clear
   20 00000000         ; put your code here
   21 00000000 F04F 0100       MOV              R1,#0       ;
   22 00000004 F04F 020A       MOV              R2,#10      ;
   23 00000008 B406            PUSH             {R1,R2}
   24 0000000A         
   25 0000000A         LOOP
   26 0000000A 7001            STRB             R1,[R0]     ;
   27 0000000C F100 0001       ADD              R0,#1       ;
   28 00000010 F1A2 0201       SUB              R2,#1       ;
   29 00000014 2A00            CMP              R2,#0       ;
   30 00000016 D1F8            BNE              LOOP        ;
   31 00000018 BC06            POP              {R1,R2}
   32 0000001A         
   33 0000001A 4770            BX               LR
   34 0000001C         
   35 0000001C         ;***** Max subroutine*********************
   36 0000001C         ;Input:   R0 has a pointer to an array of ten 8-bit unsi
                       gned numbers 
   37 0000001C         ;Output:  R0 is the index of the largest value (0 to 9) 
                       
   38 0000001C         ;Find the index of the maximum element in the array  
   39 0000001C         ;Case1 DCB 1,2,3,4,5,6,7,8,9,10            ; returns R0=
                       9 (the max value is 10)
   40 0000001C         ;Case2 DCB 1,2,100,12,13,14,15,16,17,18    ; returns R0=
                       2 (the max value is 100)
   41 0000001C         ;Case3 DCB 200,2,3,10,100,12,13,14,15,16   ; returns R0=
                       0 (the max value is 200)
   42 0000001C         ;Case4 DCB 0,2,200,8,100,12,201,14,15,199  ; returns R0=
                       6 (the max value is 201)
   43 0000001C         ;Each element of the array is stored in one 8-bit byte, 
                       located at sequential memory addresses.
   44 0000001C         ;There will be at least one nonzero value. 
   45 0000001C         ;The answer will be unique, do not worry about the max b



ARM Macro Assembler    Page 2 


                       eing at two or more indices
   46 0000001C         ;Invariables: You must not permanently modify registers 
                       R4 to R11
   47 0000001C         ;Error conditions: none
   48 0000001C                 EXPORT           Max
   49 0000001C         Max
   50 0000001C         ; put your code here
   51 0000001C E92D 01FE       PUSH             {R1-R8}
   52 00000020 7801            LDRB             R1,[R0]     ;
   53 00000022 F04F 0200       MOV              R2,#0       ; R2 IS THE POINTER
                                                             TO WHERE THE GREAT
                                                            EST NUMBER IS 
   54 00000026 F04F 0300       MOV              R3,#0       ; R3 IS THE COUNTER
                                                             OF HOW MANY ELEMEN
                                                            TS ARE DONE
   55 0000002A 460C            MOV              R4,R1       ; R4 IS THE GREATES
                                                            T NUMBER
   56 0000002C         MAXLOOP
   57 0000002C 7801            LDRB             R1,[R0]
   58 0000002E 428C            CMP              R4,R1       ;
   59 00000030 D201            BHS              MAXSKIP
   60 00000032 461A            MOV              R2,R3       ;
   61 00000034 460C            MOV              R4,R1       ;
   62 00000036         MAXSKIP
   63 00000036 F100 0001       ADD              R0,#1       ;
   64 0000003A F103 0301       ADD              R3,#1       ;
   65 0000003E 2B0A            CMP              R3,#10      ;
   66 00000040 DBF4            BLT              MAXLOOP
   67 00000042 4610            MOV              R0,R2       ;
   68 00000044         
   69 00000044         
   70 00000044         
   71 00000044         
   72 00000044         
   73 00000044 E8BD 01FE       POP{R1-R8}
   74 00000048 4770            BX               LR
   75 0000004A         
   76 0000004A         ;***** Mode subroutine *********************
   77 0000004A         ;Inputs: R0 pointer to a variable length string
   78 0000004A         ;        all data values are 0 to 9
   79 0000004A         ;        -1 is the termination code (not data)
   80 0000004A         ;Output: R0 contains the mode 
   81 0000004A         ;        value (0 to 9) that occurs the most frequently
   82 0000004A         ;Invariables: You must not permanently modify registers 
                       R4 to R11
   83 0000004A         ;String1 DCB 0,-1                            ; mode is 0
                       
   84 0000004A         ;String2 DCB 0,1,2,1,2,1,1,2,2,1,2,2,1,1,-1  ; mode is 1
                       
   85 0000004A         ;String3 DCB 6,7,7,7,6,9,8,8,7,7,7,7,4,3
   86 0000004A         ;        DCB 7,7,9,7,7,7,-1                  ; mode is 7
                       
   87 0000004A         ;String4 DCB 2,3,4,7,6,9,9,8,7,7,9,7,4,3
   88 0000004A         ;        DCB 7,7,9,7,7,9,9,9,9,9,9,-1        ; mode is 9
                       
   89 0000004A         
   90 0000004A                 EXPORT           Mode
   91 0000004A         Mode
   92 0000004A         ; put your code here



ARM Macro Assembler    Page 3 


   93 0000004A         
   94 0000004A E92D 01FE       PUSH             {R1-R8}
   95 0000004E F04F 0100       MOV              R1,#0       ;R1 HAS THE DATAS
   96 00000052 F04F 0200       MOV              R2,#0       ; R2 HAS THE TEMPOR
                                                            ARY COUNT
   97 00000056 F04F 0300       MOV              R3,#0       ; R3 HAS THE PERMAN
                                                            ANT COUNT
   98 0000005A F04F 0400       MOV              R4,#0       ; R4 HAS THE DATA T
                                                            HAT WE ARE CURRENTL
                                                            Y CONSIDERING
   99 0000005E F04F 0500       MOV              R5,#0       ; R5 IS THE PERMANA
                                                            NT MODE
  100 00000062 4606            MOV              R6,R0       ; R6 HAS THE COPY O
                                                            F R0 SO THAT R0 DOE
                                                            S NOT GET CHANGED;
  101 00000064         
  102 00000064         OUTERLOOP
  103 00000064 7801            LDRB             R1,[R0]     ;
  104 00000066 29FF            CMP              R1,#0XFF    ;  JUST TO SEE IF W
                                                            E HAVE REACHED THE 
                                                            END OF STUFF
  105 00000068 D018            BEQ              OUTERDONE
  106 0000006A 460C            MOV              R4,R1       ; CONSIDERING THE B
                                                            EGENNING ELEMENT
  107 0000006C F04F 0200       MOV              R2,#0       ; REINITIALIZE IT T
                                                            O 0
  108 00000070 F102 0201       ADD              R2,#1       ; THE FIRST TIME IT
                                                             OCCURS
  109 00000074 4606            MOV              R6,R0       ; R6 IS THE ONE THA
                                                            T WE WILL CHANGE IN
                                                             THE INNER LOOP
  110 00000076 F106 0601       ADD              R6,#1       ;
  111 0000007A         INNERLOOP
  112 0000007A 7831            LDRB             R1,[R6]
  113 0000007C 29FF            CMP              R1,#0XFF    ; CHECK IF WE REACH
                                                            ED THE INNERDONE
  114 0000007E D006            BEQ              INNERDONE   ;
  115 00000080 42A1            CMP              R1,R4       ; IF EQUAL INCREMEN
                                                            T COUNT
  116 00000082 D101            BNE              SKIPINNER
  117 00000084 F102 0200       ADD              R2,#0
  118 00000088         
  119 00000088         SKIPINNER
  120 00000088 F106 0601       ADD              R6,#1       ;
  121 0000008C E7F5            B                INNERLOOP
  122 0000008E         INNERDONE
  123 0000008E 429A            CMP              R2,R3       ; CHECKING IF THE E
                                                            LEMT WE CONSIDERED 
                                                            OCCURED FREQUENTLY
  124 00000090 DB01            BLT              SKIPCHANGE
  125 00000092 4613            MOV              R3,R2       ; IF SO CHANGE THE 
                                                            PERMENANT FREQUENCE
                                                            
  126 00000094 4625            MOV              R5,R4       ; CHANGE THE MODE T
                                                            HAT WE CONSIDERED
  127 00000096         SKIPCHANGE
  128 00000096 F100 0001       ADD              R0,#1       ; CHANGE THE POITER
                                                             FOR THE NEXT LOOP
  129 0000009A         



ARM Macro Assembler    Page 4 


  130 0000009A         
  131 0000009A E7E3            B                OUTERLOOP
  132 0000009C         OUTERDONE
  133 0000009C 4628            MOV              R0,R5       ;
  134 0000009E         
  135 0000009E E8BD 01FE       POP              {R1-R8}
  136 000000A2 4770            BX               LR
  137 000000A4         
  138 000000A4                 ALIGN
  139 000000A4                 END
Command Line: --debug --xref --cpu=Cortex-M3 --apcs=interwork --depend=.\exam2.
d -o.\exam2.o -IC:\Keil\ARM\RV31\INC -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\
Inc\Luminary --predefine="__EVAL SETA 1" --list=.\exam2.lst Exam2.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

Array1 00000000

Symbol: Array1
   Definitions
      At line 7 in file Exam2.s
   Uses
      None
Comment: Array1 unused
Data 00000000

Symbol: Data
   Definitions
      At line 6 in file Exam2.s
   Uses
      None
Comment: Data unused
2 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

.text 00000000

Symbol: .text
   Definitions
      At line 9 in file Exam2.s
   Uses
      None
Comment: .text unused
Clear 00000000

Symbol: Clear
   Definitions
      At line 19 in file Exam2.s
   Uses
      At line 18 in file Exam2.s
Comment: Clear used once
INNERDONE 0000008E

Symbol: INNERDONE
   Definitions
      At line 122 in file Exam2.s
   Uses
      At line 114 in file Exam2.s
Comment: INNERDONE used once
INNERLOOP 0000007A

Symbol: INNERLOOP
   Definitions
      At line 111 in file Exam2.s
   Uses
      At line 121 in file Exam2.s
Comment: INNERLOOP used once
LOOP 0000000A

Symbol: LOOP
   Definitions
      At line 25 in file Exam2.s
   Uses
      At line 30 in file Exam2.s
Comment: LOOP used once
MAXLOOP 0000002C

Symbol: MAXLOOP
   Definitions
      At line 56 in file Exam2.s
   Uses
      At line 66 in file Exam2.s
Comment: MAXLOOP used once
MAXSKIP 00000036

Symbol: MAXSKIP
   Definitions
      At line 62 in file Exam2.s
   Uses
      At line 59 in file Exam2.s
Comment: MAXSKIP used once
Max 0000001C

Symbol: Max



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

   Definitions
      At line 49 in file Exam2.s
   Uses
      At line 48 in file Exam2.s
Comment: Max used once
Mode 0000004A

Symbol: Mode
   Definitions
      At line 91 in file Exam2.s
   Uses
      At line 90 in file Exam2.s
Comment: Mode used once
OUTERDONE 0000009C

Symbol: OUTERDONE
   Definitions
      At line 132 in file Exam2.s
   Uses
      At line 105 in file Exam2.s
Comment: OUTERDONE used once
OUTERLOOP 00000064

Symbol: OUTERLOOP
   Definitions
      At line 102 in file Exam2.s
   Uses
      At line 131 in file Exam2.s
Comment: OUTERLOOP used once
SKIPCHANGE 00000096

Symbol: SKIPCHANGE
   Definitions
      At line 127 in file Exam2.s
   Uses
      At line 124 in file Exam2.s
Comment: SKIPCHANGE used once
SKIPINNER 00000088

Symbol: SKIPINNER
   Definitions
      At line 119 in file Exam2.s
   Uses
      At line 116 in file Exam2.s
Comment: SKIPINNER used once
13 symbols
346 symbols in table
