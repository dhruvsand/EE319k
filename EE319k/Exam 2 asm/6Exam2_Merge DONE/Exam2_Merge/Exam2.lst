


ARM Macro Assembler    Page 1 


    1 00000000         ;*****Your name goes here*******
    2 00000000         ; -5 points if you do not add your name
    3 00000000         ;DHRUV SANDESARA
    4 00000000         ;60 MINS
    5 00000000         
    6 00000000         ;This is Exam2_Merge 
    7 00000000         ;EE319K Practice exam
    8 00000000         ;You edit this file only
    9 00000000                 AREA             Data, ALIGN=4
   10 00000000         
   11 00000000         
   12 00000000                 AREA             |.text|, CODE, READONLY, ALIGN=
2
   13 00000000                 THUMB
   14 00000000         
   15 00000000         ;***** Init *********************
   16 00000000         ;Initialize the array to a value
   17 00000000         ;Each value is 16-bit unsigned
   18 00000000         ;Initialize the first array to 1 and the second array to
                        -1
   19 00000000         ;Inputs:  R0 is a pointer to an empty array of 16-bit un
                       signed numbers
   20 00000000         ;         R1 is the 16-bit unsigned value to be stored i
                       nto each element
   21 00000000         ;         R2 is the number of 16-bit unsigned values in 
                       the array
   22 00000000         ;         The array maybe of zero length (R2 may be zero
                       )
   23 00000000         ;Output:  none
   24 00000000         ;Error conditions: none
   25 00000000         ;Invariables: You must not permanently modify registers 
                       R4 to R11, and LR
   26 00000000         ;Test cases
   27 00000000         ;R0=>empty array, R1=3,R2=4, result new array is {3,3,3,
                       3}
   28 00000000         ;R0=>empty array, R1=7,R2=1, result new array is {7}
   29 00000000         ;R0=>empty array, R1=5,R2=8, result new array is {5,5,5,
                       5,5,5,5,5}
   30 00000000         ;R0=>empty array, R1=0,R2=0, result is no change to empt
                       y array
   31 00000000                 EXPORT           Init
   32 00000000         Init
   33 00000000         ; put your code here
   34 00000000         
   35 00000000         INITLOOP
   36 00000000 2A00            CMP              R2,#0       ;
   37 00000002 D005            BEQ              INITDONE
   38 00000004 8001            STRH             R1,[R0]     ;
   39 00000006 F102 32FF       ADD              R2,#-1      ;
   40 0000000A F100 0002       ADD              R0,#2       ;
   41 0000000E E7F7            B                INITLOOP    ;
   42 00000010         
   43 00000010         
   44 00000010         
   45 00000010         INITDONE
   46 00000010         
   47 00000010         
   48 00000010 4770            BX               LR
   49 00000012         



ARM Macro Assembler    Page 2 


   50 00000012         ;***** Insert subroutine *********************
   51 00000012         ; Insert the number into the beginning of the output arr
                       ay
   52 00000012         ;   copy all the elements of the input array to the outp
                       ut array
   53 00000012         ;Inputs : Register R0 points to input array of 16-bit un
                       signed numbers
   54 00000012         ;         Register R1 contains the length of the input a
                       rray
   55 00000012         ;         Register R2 contains number to insert
   56 00000012         ;         Register R3 is a pointer to an empty array tha
                       t should be written into
   57 00000012         ;Outputs: The array at R3 is modified
   58 00000012         ;Invariables: You must not permanently modify registers 
                       R4 to R11, and LR
   59 00000012         ;Error conditions: none.
   60 00000012         ;test cases
   61 00000012         ;R0=>{1,2,3,4,5,6},R1=6,R2=8,result={8,1,2,3,4,5,6}
   62 00000012         ;R0=>{1},R1=1,R2=9,,result={9,1}
   63 00000012         ;R0=>{0,0,1,2},R1=4,R2=0xFE,,result={0xFE,0,0,1,2}
   64 00000012         ;R0=>{},R1=0,R2=0x45,result={0x45}
   65 00000012         
   66 00000012                 EXPORT           Insert
   67 00000012         Insert
   68 00000012         ; put your code here
   69 00000012 801A            STRH             R2,[R3]
   70 00000014 F103 0302       ADD              R3,#2       ;
   71 00000018         
   72 00000018         INSERTLOOP
   73 00000018 2900            CMP              R1,#0       ;
   74 0000001A D008            BEQ              INSERTDONE
   75 0000001C 8802            LDRH             R2,[R0]
   76 0000001E 801A            STRH             R2,[R3]     ;
   77 00000020 F101 31FF       ADD              R1,#-1      ;
   78 00000024 F100 0002       ADD              R0,#2       ;
   79 00000028 F103 0302       ADD              R3,#2       ;
   80 0000002C E7F4            B                INSERTLOOP  ;
   81 0000002E         
   82 0000002E         
   83 0000002E         INSERTDONE
   84 0000002E 4770            BX               LR
   85 00000030         
   86 00000030         ;***** Merge subroutine *********************
   87 00000030         ; Assume both arrays are initially sorted 16-bit unsigne
                       d numbers
   88 00000030         ; Merge the two input arrays into the output array
   89 00000030         ;   making the output array contain all the numbers in s
                       orted order
   90 00000030         ;Inputs : Register R0 points to the first array of 16-bi
                       t unsigned numbers
   91 00000030         ;         Register R1 points to the second array of 16-b
                       it unsigned numbers
   92 00000030         ;         Register R2 contains the number of elements in
                        the first array
   93 00000030         ;         Register R3 contains the number of elements in
                        the second array
   94 00000030         ;         Top element on the stack is a pointer to an em
                       pty output array
   95 00000030         ;Outputs: the output array is modified



ARM Macro Assembler    Page 3 


   96 00000030         ;Invariables: You must not permanently modify registers 
                       R4 to R11, and LR
   97 00000030         ;Error conditions: none.
   98 00000030         ;test cases
   99 00000030         ;R0=>{0x8000},             R1=>{0x7000},             R2=
                       1,R3=1,output array={0x7000,0x8000}
  100 00000030         ;R0=>{0x01,0x03,0x05,0x07},R1=>{0x02,0x04,0x06,0x08},R2=
                       4,R3=4,output array={0x01,0x02,0x03,0x04,0x05,0x06,0x07,
                       0x08}
  101 00000030         ;R0=>{0x01,0x02,0x03,0x04},R1=>{0x05,0x06,0x07,0x08},R2=
                       4,R3=4,output array={0x01,0x02,0x03,0x04,0x05,0x06,0x07,
                       0x08}
  102 00000030         ;R0=>{0x01,0x02},          R1=>{0x05,0x06,0x07,0x08},R2=
                       2,R3=4,output array={0x01,0x02,0x05,0x06,0x07,0x08}
  103 00000030         ;R0=>{0x01,0x02,0x03,0x04},R1=>{0x05},               R2=
                       4,R3=1,output array={0x01,0x02,0x03,0x04,0x05}
  104 00000030         ;R0=>{0x01,0x02,0x03,0x04},R1=>{},                   R2=
                       4,R3=0,output array={0x01,0x02,0x03,0x04}
  105 00000030         ;R0=>{},R1=>{},                                      R2=
                       0,R3=0,output array={} (no change to output array)
  106 00000030                 EXPORT           Merge
  107 00000030         Merge
  108 00000030         ; put your code here
  109 00000030         
  110 00000030         
  111 00000030 B4F0            PUSH             {R4-R7}     ;
  112 00000032         
  113 00000032 9D04            LDR              R5, [SP,#16]
  114 00000034         MERGELOOP
  115 00000034 2A00            CMP              R2,#0       ;
  116 00000036 D016            BEQ              ARRAY1DONE  ;
  117 00000038 2B00            CMP              R3,#0       ;
  118 0000003A D01F            BEQ              ARRAY2DONE  ;
  119 0000003C         
  120 0000003C 8804            LDRH             R4,[R0]     ;
  121 0000003E 880E            LDRH             R6,[R1]     ;
  122 00000040 42B4            CMP              R4,R6       ;
  123 00000042 DB00            BLT              ADD1ST      ;
  124 00000044 D807            BHI              ADD2ND      ;
  125 00000046         ADD1ST
  126 00000046 802C            STRH             R4,[R5]     ;
  127 00000048 F105 0502       ADD              R5,#2       ;
  128 0000004C F100 0002       ADD              R0,#2       ;
  129 00000050 F102 32FF       ADD              R2,#-1      ;
  130 00000054 E7EE            B                MERGELOOP
  131 00000056         ADD2ND
  132 00000056 802E            STRH             R6,[R5]     ;
  133 00000058 F105 0502       ADD              R5,#2       ;
  134 0000005C F101 0102       ADD              R1,#2       ;
  135 00000060 F103 33FF       ADD              R3,#-1      ;
  136 00000064 E7E6            B                MERGELOOP
  137 00000066         
  138 00000066         
  139 00000066         
  140 00000066         
  141 00000066         
  142 00000066         
  143 00000066         
  144 00000066         ARRAY1DONE



ARM Macro Assembler    Page 4 


  145 00000066 2B00            CMP              R3,#0       ;
  146 00000068 D013            BEQ              MERGEDONE   ;
  147 0000006A 880C            LDRH             R4,[R1]     ;
  148 0000006C 802C            STRH             R4,[R5]
  149 0000006E F105 0502       ADD              R5,#2       ;
  150 00000072 F101 0102       ADD              R1,#2       ;
  151 00000076 F103 33FF       ADD              R3,#-1      ;
  152 0000007A E7DB            B                MERGELOOP
  153 0000007C         
  154 0000007C         
  155 0000007C         
  156 0000007C         ARRAY2DONE
  157 0000007C 2A00            CMP              R2,#0       ;
  158 0000007E D008            BEQ              MERGEDONE   ; 
  159 00000080 8804            LDRH             R4,[R0]     ;
  160 00000082 802C            STRH             R4,[R5]
  161 00000084 F105 0502       ADD              R5,#2       ;
  162 00000088 F100 0002       ADD              R0,#2       ;
  163 0000008C F102 32FF       ADD              R2,#-1      ;
  164 00000090 E7D0            B                MERGELOOP   ;
  165 00000092         
  166 00000092         
  167 00000092         
  168 00000092         
  169 00000092         MERGEDONE
  170 00000092 BCF0            POP{R4-R7}                   ;
  171 00000094         
  172 00000094         
  173 00000094         
  174 00000094         
  175 00000094         
  176 00000094         
  177 00000094 4770            BX               LR
  178 00000096         
  179 00000096 00 00           ALIGN
  180 00000098                 END
Command Line: --debug --xref --cpu=Cortex-M3 --apcs=interwork --depend=.\exam2.
d -o.\exam2.o -IC:\Keil\ARM\RV31\INC -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\
Inc\Luminary --predefine="__EVAL SETA 1" --list=.\exam2.lst Exam2.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

Data 00000000

Symbol: Data
   Definitions
      At line 9 in file Exam2.s
   Uses
      None
Comment: Data unused
1 symbol



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

.text 00000000

Symbol: .text
   Definitions
      At line 12 in file Exam2.s
   Uses
      None
Comment: .text unused
ADD1ST 00000046

Symbol: ADD1ST
   Definitions
      At line 125 in file Exam2.s
   Uses
      At line 123 in file Exam2.s
Comment: ADD1ST used once
ADD2ND 00000056

Symbol: ADD2ND
   Definitions
      At line 131 in file Exam2.s
   Uses
      At line 124 in file Exam2.s
Comment: ADD2ND used once
ARRAY1DONE 00000066

Symbol: ARRAY1DONE
   Definitions
      At line 144 in file Exam2.s
   Uses
      At line 116 in file Exam2.s
Comment: ARRAY1DONE used once
ARRAY2DONE 0000007C

Symbol: ARRAY2DONE
   Definitions
      At line 156 in file Exam2.s
   Uses
      At line 118 in file Exam2.s
Comment: ARRAY2DONE used once
INITDONE 00000010

Symbol: INITDONE
   Definitions
      At line 45 in file Exam2.s
   Uses
      At line 37 in file Exam2.s
Comment: INITDONE used once
INITLOOP 00000000

Symbol: INITLOOP
   Definitions
      At line 35 in file Exam2.s
   Uses
      At line 41 in file Exam2.s
Comment: INITLOOP used once
INSERTDONE 0000002E

Symbol: INSERTDONE



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

   Definitions
      At line 83 in file Exam2.s
   Uses
      At line 74 in file Exam2.s
Comment: INSERTDONE used once
INSERTLOOP 00000018

Symbol: INSERTLOOP
   Definitions
      At line 72 in file Exam2.s
   Uses
      At line 80 in file Exam2.s
Comment: INSERTLOOP used once
Init 00000000

Symbol: Init
   Definitions
      At line 32 in file Exam2.s
   Uses
      At line 31 in file Exam2.s
Comment: Init used once
Insert 00000012

Symbol: Insert
   Definitions
      At line 67 in file Exam2.s
   Uses
      At line 66 in file Exam2.s
Comment: Insert used once
MERGEDONE 00000092

Symbol: MERGEDONE
   Definitions
      At line 169 in file Exam2.s
   Uses
      At line 146 in file Exam2.s
      At line 158 in file Exam2.s

MERGELOOP 00000034

Symbol: MERGELOOP
   Definitions
      At line 114 in file Exam2.s
   Uses
      At line 130 in file Exam2.s
      At line 136 in file Exam2.s
      At line 152 in file Exam2.s
      At line 164 in file Exam2.s

Merge 00000030

Symbol: Merge
   Definitions
      At line 107 in file Exam2.s
   Uses
      At line 106 in file Exam2.s
Comment: Merge used once
14 symbols
346 symbols in table
