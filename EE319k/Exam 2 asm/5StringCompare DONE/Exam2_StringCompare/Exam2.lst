


ARM Macro Assembler    Page 1 


    1 00000000         ;*****Your name goes here*******
    2 00000000         ; DHRUV SANDESARA
    3 00000000         ;55 MINS
    4 00000000         ; -5 points if you do not add your name
    5 00000000         
    6 00000000         ;This is Exam2_StringCompare 
    7 00000000         ;EE319K Practice exam
    8 00000000         ;You edit this file only
    9 00000000                 AREA             Data, ALIGN=4
   10 00000000         
   11 00000000         
   12 00000000                 AREA             |.text|, CODE, READONLY, ALIGN=
2
   13 00000000                 THUMB
   14 00000000         
   15 00000000         ;***************** Size****************************
   16 00000000         ; Determines the length of an ASCII string.  
   17 00000000         ; Input parameter: R0 points to null-terminated string
   18 00000000         ; Output parameter: R0 equals the length
   19 00000000         ; Error conditions: if string is empty, return R0=0 
   20 00000000         ;Invariables: You must not permanently modify registers 
                       R4 to R11, and LR
   21 00000000         ;Test cases
   22 00000000         ;String1 DCB "cat",0                         ;size=3
   23 00000000         ;String2 DCB "Ramesh is great.",0            ;size=16
   24 00000000         ;String3 DCB "EE319K Exam2 was hard!",0      ;size=22
   25 00000000         ;String4 DCB "My TA is nice,",0              ;size=14
   26 00000000         ;String5 DCB 0                               ;size=0
   27 00000000                 EXPORT           Size
   28 00000000         Size
   29 00000000         ; put your code here
   30 00000000 E92D 01FE       PUSH{R1-R8}
   31 00000004 F04F 0200       MOV              R2,#0       ;
   32 00000008         SIZELOOP
   33 00000008 7801            LDRB             R1,[R0]
   34 0000000A 2900            CMP              R1,#0       ;
   35 0000000C D004            BEQ              SIZEDONE
   36 0000000E F102 0201       ADD              R2,#1       ;
   37 00000012 F100 0001       ADD              R0,#1       ;
   38 00000016 E7F7            B                SIZELOOP
   39 00000018         
   40 00000018         SIZEDONE
   41 00000018 4610            MOV              R0,R2       ;
   42 0000001A E8BD 01FE       POP              {R1-R8}
   43 0000001E 4770            BX               LR
   44 00000020         
   45 00000020         ;***************** Compare****************************
   46 00000020         ; Compare two ASCII characters
   47 00000020         ; Input parameter:  R0 is the first and 
   48 00000020         ;                   R1 is the second 8-bit ASCII charact
                       er.
   49 00000020         ; Output parameter: R0 = -1 if the first is greater than
                        the second, 
   50 00000020         ;                   R0 = 0 if the first equals the secon
                       d, and 
   51 00000020         ;                   R0 = +1 if the first is less than th
                       e second
   52 00000020         ; Error conditions: none
   53 00000020         



ARM Macro Assembler    Page 2 


   54 00000020         ;Invariables: You must not permanently modify registers 
                       R4 to R11, and LR
   55 00000020         ;Error conditions: none
   56 00000020         ;Test cases
   57 00000020         ;Try1    DCB 'a','b'           ;Compare = +1 because 'a'
                        < 'b'
   58 00000020         ;Try2    DCB 'a','B'           ;Compare = -1 because 'A'
                        > 'b'
   59 00000020         ;Try3    DCB 'a','a'           ;Compare = 0  because 'a'
                        == 'a'
   60 00000020         ;Try4    DCB 200,199           ;Compare = -1 because 200
                        > 199
   61 00000020         ;Try5    DCB 200,201           ;Compare = 1 because 200 
                       < 201
   62 00000020                 EXPORT           Compare
   63 00000020         Compare
   64 00000020 B406            PUSH             {R1-R2}
   65 00000022         ; put your code here
   66 00000022 4288            CMP              R0,R1       ;
   67 00000024 DC02            BGT              GREATER
   68 00000026 DB04            BLT              LESSTHAN
   69 00000028 D006            BEQ              EQUAL
   70 0000002A E007            B                DONE
   71 0000002C         GREATER
   72 0000002C F04F 30FF       MOV              R0,#-1      ;
   73 00000030 E004            B                DONE        ;
   74 00000032         LESSTHAN
   75 00000032 F04F 0001       MOV              R0,#1       ;
   76 00000036 E001            B                DONE
   77 00000038         
   78 00000038         EQUAL
   79 00000038 F04F 0000       MOV              R0,#0       ;
   80 0000003C         
   81 0000003C         
   82 0000003C         DONE
   83 0000003C BC06            POP              {R1-R2}
   84 0000003E         
   85 0000003E 4770            BX               LR
   86 00000040         
   87 00000040         ;*********StringCompare********************************
   88 00000040         ; Compares two ASCII strings, null-terminated
   89 00000040         ; Input parameter: A pointer to the first string is pass
                       ed into your program in R0.
   90 00000040         ;                  A pointer to the second string is pas
                       sed into your program in R1.
   91 00000040         ; Output parameter: The result is returned in the R0
   92 00000040         ;    +1 if the first string is alphabetically before the
                        second
   93 00000040         ;     0 if the two strings are equal
   94 00000040         ;    -1 if the first string is alphabetically after the 
                       second
   95 00000040         ; Error conditions: none
   96 00000040         ;Invariables: You must not permanently modify registers 
                       R4 to R11, and LR
   97 00000040         ;Test cases
   98 00000040         ;First1  DCB 'cat',0     ; +1 because first letter 'c'< 
                       'd'
   99 00000040         ;Second1 DCB 'dog',0    
  100 00000040         ;First2  DCB 'cattle',0     ; +1 because second letter '



ARM Macro Assembler    Page 3 


                       a'< 'o' 
  101 00000040         ;Second2 DCB 'cobra',0   ;(length doesn't matter)
  102 00000040         ;First3  DCB 'hose',0    ; -1 because third letter 's'> 
                       'r' 
  103 00000040         ;Second3 DCB 'horse',0   ; (length doesn't matter)
  104 00000040         ;First4  DCB 'cat',0     ; +1 because all letters of the
                        first string match, 
  105 00000040         ;Second4 DCB 'cattle',0  ; but the first string is short
                       er (length does matter)
  106 00000040         ;First5  DCB 'cattle',0  ;-1 because all letters of the 
                       second string match, 
  107 00000040         ;Second5 DCB 'cat',0     ; but the second string is shor
                       ter (length does matter)
  108 00000040         ;First6  DCB 'horse',0
  109 00000040         ;Second6 DCB 'horse',0   ; 0 because the strings are equ
                       al
  110 00000040         ;First7  DCB 0
  111 00000040         ;Second7 DCB 0           ; 0 because the strings are equ
                       al and empty
  112 00000040         
  113 00000040                 EXPORT           StringCompare
  114 00000040         StringCompare
  115 00000040         ; put your code here
  116 00000040 E92D 41FC       PUSH{R2-R8,LR}
  117 00000044 4602            MOV              R2,R0       ; R2 HAS POINTER FO
                                                            R THE FIRST STRING
  118 00000046 460B            MOV              R3,R1       ; R3 HAS THE POINTE
                                                            R FOR THE SECOND ST
                                                            RING
  119 00000048         LOOP
  120 00000048 7810            LDRB             R0,[R2]     ;
  121 0000004A 7819            LDRB             R1,[R3]     ;
  122 0000004C 2800            CMP              R0,#0       ;
  123 0000004E D00A            BEQ              CHECK2ND    ;
  124 00000050 2900            CMP              R1,#0       ;
  125 00000052 D00B            BEQ              CHECK1ST
  126 00000054         
  127 00000054 F7FF FFFE       BL               Compare
  128 00000058         
  129 00000058 2800            CMP              R0,#0       ;
  130 0000005A D113            BNE              STRINGCOMPAREDONE ;
  131 0000005C F102 0201       ADD              R2,#1       ;
  132 00000060 F103 0301       ADD              R3,#1       ;
  133 00000064 E7F0            B                LOOP        ;
  134 00000066         
  135 00000066         
  136 00000066         
  137 00000066         
  138 00000066         
  139 00000066         CHECK2ND
  140 00000066 2900            CMP              R1,#0       ;
  141 00000068 D009            BEQ              BOTHEQUAL
  142 0000006A E005            B                GREATER2    ;
  143 0000006C         
  144 0000006C         CHECK1ST
  145 0000006C 2800            CMP              R0,#0       ;
  146 0000006E D006            BEQ              BOTHEQUAL
  147 00000070 E7FF            B                GREATER1    ; 
  148 00000072         



ARM Macro Assembler    Page 4 


  149 00000072         
  150 00000072         
  151 00000072         GREATER1
  152 00000072 F04F 30FF       MOV              R0,#-1      ;
  153 00000076 E005            B                STRINGCOMPAREDONE
  154 00000078         
  155 00000078         GREATER2
  156 00000078 F04F 0001       MOV              R0,#1       ;
  157 0000007C E002            B                STRINGCOMPAREDONE
  158 0000007E         
  159 0000007E         BOTHEQUAL
  160 0000007E F04F 0000       MOV              R0,#0       ;
  161 00000082 E7FF            B                STRINGCOMPAREDONE
  162 00000084         
  163 00000084         
  164 00000084         STRINGCOMPAREDONE
  165 00000084 E8BD 41FC       POP{R2-R8,LR}
  166 00000088         
  167 00000088 4770            BX               LR
  168 0000008A         
  169 0000008A 00 00           ALIGN
  170 0000008C                 END
Command Line: --debug --xref --cpu=Cortex-M3 --apcs=interwork --depend=.\exam2.
d -o.\exam2.o -IC:\Keil\ARM\RV31\INC -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\
Inc\Luminary --predefine="__EVAL SETA 1" --list=.\exam2.lst Exam2.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

Data 00000000

Symbol: Data
   Definitions
      At line 9 in file Exam2.s
   Uses
      None
Comment: Data unused
1 symbol



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

.text 00000000

Symbol: .text
   Definitions
      At line 12 in file Exam2.s
   Uses
      None
Comment: .text unused
BOTHEQUAL 0000007E

Symbol: BOTHEQUAL
   Definitions
      At line 159 in file Exam2.s
   Uses
      At line 141 in file Exam2.s
      At line 146 in file Exam2.s

CHECK1ST 0000006C

Symbol: CHECK1ST
   Definitions
      At line 144 in file Exam2.s
   Uses
      At line 125 in file Exam2.s
Comment: CHECK1ST used once
CHECK2ND 00000066

Symbol: CHECK2ND
   Definitions
      At line 139 in file Exam2.s
   Uses
      At line 123 in file Exam2.s
Comment: CHECK2ND used once
Compare 00000020

Symbol: Compare
   Definitions
      At line 63 in file Exam2.s
   Uses
      At line 62 in file Exam2.s
      At line 127 in file Exam2.s

DONE 0000003C

Symbol: DONE
   Definitions
      At line 82 in file Exam2.s
   Uses
      At line 70 in file Exam2.s
      At line 73 in file Exam2.s
      At line 76 in file Exam2.s

EQUAL 00000038

Symbol: EQUAL
   Definitions
      At line 78 in file Exam2.s
   Uses
      At line 69 in file Exam2.s



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

Comment: EQUAL used once
GREATER 0000002C

Symbol: GREATER
   Definitions
      At line 71 in file Exam2.s
   Uses
      At line 67 in file Exam2.s
Comment: GREATER used once
GREATER1 00000072

Symbol: GREATER1
   Definitions
      At line 151 in file Exam2.s
   Uses
      At line 147 in file Exam2.s
Comment: GREATER1 used once
GREATER2 00000078

Symbol: GREATER2
   Definitions
      At line 155 in file Exam2.s
   Uses
      At line 142 in file Exam2.s
Comment: GREATER2 used once
LESSTHAN 00000032

Symbol: LESSTHAN
   Definitions
      At line 74 in file Exam2.s
   Uses
      At line 68 in file Exam2.s
Comment: LESSTHAN used once
LOOP 00000048

Symbol: LOOP
   Definitions
      At line 119 in file Exam2.s
   Uses
      At line 133 in file Exam2.s
Comment: LOOP used once
SIZEDONE 00000018

Symbol: SIZEDONE
   Definitions
      At line 40 in file Exam2.s
   Uses
      At line 35 in file Exam2.s
Comment: SIZEDONE used once
SIZELOOP 00000008

Symbol: SIZELOOP
   Definitions
      At line 32 in file Exam2.s
   Uses
      At line 38 in file Exam2.s
Comment: SIZELOOP used once
STRINGCOMPAREDONE 00000084




ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Relocatable symbols

Symbol: STRINGCOMPAREDONE
   Definitions
      At line 164 in file Exam2.s
   Uses
      At line 130 in file Exam2.s
      At line 153 in file Exam2.s
      At line 157 in file Exam2.s
      At line 161 in file Exam2.s

Size 00000000

Symbol: Size
   Definitions
      At line 28 in file Exam2.s
   Uses
      At line 27 in file Exam2.s
Comment: Size used once
StringCompare 00000040

Symbol: StringCompare
   Definitions
      At line 114 in file Exam2.s
   Uses
      At line 113 in file Exam2.s
Comment: StringCompare used once
17 symbols
349 symbols in table
