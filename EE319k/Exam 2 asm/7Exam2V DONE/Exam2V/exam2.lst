


ARM Macro Assembler    Page 1 


    1 00000000         ;*****Your name goes here*******
    2 00000000         ; -5 points if you do not add your name
    3 00000000         ;DHRUV SANDESARA
    4 00000000         ;This is Exam2_BCD  
    5 00000000         ;EE319K Fall 2013
    6 00000000         ;November 7, 2013
    7 00000000         ;You edit this file only
    8 00000000                 AREA             Data, ALIGN=4
    9 00000000         
   10 00000000         
   11 00000000                 AREA             |.text|, CODE, READONLY, ALIGN=
2
   12 00000000                 THUMB
   13 00000000         
   14 00000000         ;***** PosOrNeg subroutine*********************
   15 00000000         ;Determines if the given BCD number in R0 is a positive 
                       or negative number 
   16 00000000         ;Input:   R0 has a number in 3-digit, 16-bit signed BCD 
                       format
   17 00000000         ;Output:  R0 returned as +1 if the number was positive a
                       nd -1 if the number was negative
   18 00000000         ;Invariables (AAPCS): You must not permanently modify re
                       gisters R4 to R11, and LR
   19 00000000         ;Error conditions: none, all inputs will be valid BCD nu
                       mbers
   20 00000000         ;Test cases:
   21 00000000         ; Input = 0x0125 ; result is 1   (0x00000001)
   22 00000000         ; Input = 0xF042 ; result is -1  (0xFFFFFFFF)
   23 00000000         ; Input = 0x0999 ; result is 1   (0x00000001)
   24 00000000         ; Input = 0xF001 ; result is -1  (0xFFFFFFFF)
   25 00000000         ; Input = 0x0000 ; result is 1   (0x00000001)
   26 00000000                 EXPORT           PosOrNeg
   27 00000000         PosOrNeg
   28 00000000         ; put your code here
   29 00000000 F400 4070       AND              R0,R0,#0XF000 ;
   30 00000004 2800            CMP              R0,#0       ;
   31 00000006 D002            BEQ              ZERO
   32 00000008 F04F 30FF       MOV              R0,#-1      ;
   33 0000000C E001            B                DONE
   34 0000000E         ZERO
   35 0000000E F04F 0001       MOV              R0,#1       ;
   36 00000012         DONE
   37 00000012 4770            BX               LR
   38 00000014         
   39 00000014         ;***** BCD2Dec subroutine*********************
   40 00000014         ; Converts a 3-digit, 16-bit signed number in BCD format
                        into a 
   41 00000014         ; regular binary representation.
   42 00000014         ; Note that BCD is positional number system with each su
                       ccessive nibble
   43 00000014         ; having a place value that is a power of 10.
   44 00000014         ;Input:   R0 has a number in 3-digit, 16-bit signed BCD 
                       format
   45 00000014         ;Output:  R0 has the signed 32-bit binary-encoded value 
                       of the input
   46 00000014         ;Invariables (AAPCS): You must not permanently modify re
                       gisters R4 to R11, and LR
   47 00000014         ;Error conditions: none, all inputs will be valid BCD nu
                       mbers



ARM Macro Assembler    Page 2 


   48 00000014         ;Test cases:
   49 00000014         ; Input = 0x0125 ; result is 125 (in Hex: 0x0000007D)
   50 00000014         ; Input = 0xF042 ; result is -42 (in Hex: 0xFFFFFFD6)
   51 00000014         ; Input = 0x0999 ; result is 999 (in Hex: 0x000003E7)
   52 00000014         ; Input = 0xF001 ; result is -1  (in Hex: 0xFFFFFFFF)
   53 00000014         ; Input = 0xF999 ; result is -999(in Hex: 0xFFFFFC19)
   54 00000014                 EXPORT           BCD2Dec
   55 00000014         BCD2Dec
   56 00000014         ; put your code here
   57 00000014 B5FE            PUSH             {R1-R7,LR}  ;
   58 00000016 4601            MOV              R1,R0       ;
   59 00000018 F7FF FFFE       BL               PosOrNeg    ;
   60 0000001C F1B0 3FFF       CMP              R0,#-1      ;
   61 00000020 D017            BEQ              NEGATIVE
   62 00000022 F04F 0300       MOV              R3,#0       ;
   63 00000026 F04F 040A       MOV              R4,#10      ;
   64 0000002A         
   65 0000002A F001 020F       AND              R2,R1,#0X000F ; 0TH PLACE
   66 0000002E 4413            ADD              R3,R2       ;
   67 00000030 EA4F 1111       LSR              R1,#4       ;
   68 00000034 F001 020F       AND              R2,R1,#0X000F ; 10S PLACE
   69 00000038 FB02 F204       MUL              R2,R2,R4    ;
   70 0000003C 4413            ADD              R3,R2       ;
   71 0000003E         
   72 0000003E EA4F 1111       LSR              R1,#4       ;
   73 00000042 F001 020F       AND              R2,R1,#0X000F ;
   74 00000046 FB02 F204       MUL              R2,R2,R4    ;
   75 0000004A FB02 F204       MUL              R2,R2,R4    ; 100S PLACE
   76 0000004E 4413            ADD              R3,R2       ;
   77 00000050         
   78 00000050 E019            B                BCDDONE
   79 00000052         
   80 00000052         
   81 00000052         
   82 00000052         
   83 00000052         
   84 00000052         NEGATIVE
   85 00000052 F04F 0300       MOV              R3,#0       ;
   86 00000056 F04F 040A       MOV              R4,#10      ;
   87 0000005A         
   88 0000005A F001 020F       AND              R2,R1,#0X000F ; 0TH PLACE
   89 0000005E EBA3 0302       SUB              R3,R2       ;
   90 00000062 EA4F 1111       LSR              R1,#4       ;
   91 00000066 F001 020F       AND              R2,R1,#0X000F ; 10S PLACE
   92 0000006A FB02 F204       MUL              R2,R2,R4    ;
   93 0000006E EBA3 0302       SUB              R3,R2       ;
   94 00000072         
   95 00000072 EA4F 1111       LSR              R1,#4       ;
   96 00000076 F001 020F       AND              R2,R1,#0X000F ;
   97 0000007A FB02 F204       MUL              R2,R2,R4    ;
   98 0000007E FB02 F204       MUL              R2,R2,R4    ; 100S PLACE
   99 00000082 EBA3 0302       SUB              R3,R2       ;
  100 00000086         
  101 00000086         
  102 00000086         
  103 00000086         BCDDONE
  104 00000086 4618            MOV              R0,R3       ;
  105 00000088         
  106 00000088 E8BD 40FE       POP              {R1-R7,LR}  ;



ARM Macro Assembler    Page 3 


  107 0000008C         
  108 0000008C 4770            BX               LR
  109 0000008E         
  110 0000008E         ;***** BCDMul subroutine*********************
  111 0000008E         ; Multiplies two 3-digit, 16-bit signed numbers in BCD f
                       ormat 
  112 0000008E         ; and returns the result in regular binary representatio
                       n
  113 0000008E         ;Input:   R0, R1 have numbers in 3-digit, 16-bit signed 
                       BCD format
  114 0000008E         ;Output:  R0 has the signed 32-bit product of the two in
                       put numbers
  115 0000008E         ;Invariables (AAPCS): You must not permanently modify re
                       gisters R4 to R11, and LR
  116 0000008E         ;Error conditions: none, all inputs will be valid BCD nu
                       mbers. No overflow can occur
  117 0000008E         ;Test cases:
  118 0000008E         ; Input R0=0x0005 R1=0x0002; result is 5*2=10           
                       (0x0000000A)
  119 0000008E         ; Input R0=0xF001 R1=0x0008; result is -1*8=-8          
                       (0xFFFFFFF8)
  120 0000008E         ; Input R0=0xF999 R1=0xF999; result is -999*-999=998001 
                       (0x000F3A71)
  121 0000008E         ; Input R0=0x0013 R1=0xF001; result is 13*-1 = -13      
                       (0xFFFFFFF3)
  122 0000008E                 EXPORT           BCDMul
  123 0000008E         BCDMul
  124 0000008E         ; put your code here
  125 0000008E B51C            PUSH             {R2-R4,LR}
  126 00000090         
  127 00000090 F7FF FFFE       BL               BCD2Dec     ;
  128 00000094 4602            MOV              R2,R0       ;
  129 00000096         
  130 00000096         
  131 00000096 4608            MOV              R0,R1       ;
  132 00000098 F7FF FFFE       BL               BCD2Dec     ;
  133 0000009C 4603            MOV              R3,R0       ;
  134 0000009E         
  135 0000009E FB02 F003       MUL              R0,R2,R3    ;
  136 000000A2         
  137 000000A2         
  138 000000A2         
  139 000000A2         
  140 000000A2         
  141 000000A2         
  142 000000A2 E8BD 401C       POP              {R2-R4,LR}
  143 000000A6         
  144 000000A6 4770            BX               LR
  145 000000A8         
  146 000000A8         ;***** DotProduct subroutine*********************
  147 000000A8         ; Computes the dot product of two BCD-encoded arrays of 
                       numbers.
  148 000000A8         ; The inputs are two pointers to arrays of 3-digit signe
                       d BCD numbers
  149 000000A8         ; and the size of the two arrays.
  150 000000A8         ;Input:   R0 has address of the first array A
  151 000000A8         ;         R1 has address of the second array B
  152 000000A8         ;         R2=n is the size of both arrays
  153 000000A8         ;Output:  R0 has the binary-encoded result of computing 



ARM Macro Assembler    Page 4 


                       the dot product
  154 000000A8         ;            A[0]*B[0] + A[1]*B[1] + ...+A[n-1]*B[n-1]
  155 000000A8         ;         If the arrays are empty, return 0
  156 000000A8         ;Invariables (AAPCS): You must not permanently modify re
                       gisters R4 to R11, and LR
  157 000000A8         ;Error conditions: none, all numbers will be valid
  158 000000A8         ;Test cases:
  159 000000A8         ; Test case 1:
  160 000000A8         ; first array = {0x0010,0x0020}
  161 000000A8         ; second array= {0x0030,0x0040}
  162 000000A8         ;   R2 gives a size of 2
  163 000000A8         ;   Result = 10*30+20*40 = 300+800 = 1100 = 0x0000044C
  164 000000A8         ; Test case 2:
  165 000000A8         ; first array = {0xF010,0x0002}
  166 000000A8         ; second array= {0x0001,0x0003}
  167 000000A8         ;   R2 gives a size of 2
  168 000000A8         ;   Result = -1*10 + 2*3 = -10+6 = -4 = 0xFFFFFFFC
  169 000000A8         ; Test case 3:
  170 000000A8         ; first array = {0x0999,0xF999,0xF999}
  171 000000A8         ; second array= {0x0999,0xF999,0x0999}
  172 000000A8         ;   R2 gives a size of 3
  173 000000A8         ;   Result = 998001 + -998001 + 998001 = 998001 = 0x000F
                       3A71
  174 000000A8         ; Test case 4:
  175 000000A8         ; first array = {1,2,3,4,5}
  176 000000A8         ; second array= {1,1,1,1,2}
  177 000000A8         ;   R2 gives a size of 5
  178 000000A8         ;   Result = 1+2+3+4+10 = 20 = 0x000000014
  179 000000A8         ; Test case 5:
  180 000000A8         ; first array = {1,2,3,4,5,6,7,8,9,0x10}
  181 000000A8         ; second array= {1,2,3,4,5,6,7,8,9,0x10}
  182 000000A8         ;   R2 gives a size of 10
  183 000000A8         ;   Result = 1+4+9+25+36+49+64+81 = 385 = 0x00000181
  184 000000A8         ; Test case 6:
  185 000000A8         ; first array = empty
  186 000000A8         ; second array= empty
  187 000000A8         ;   R2 gives a size of 0
  188 000000A8         ;   Result = 0 = 0x00000000
  189 000000A8                 EXPORT           DotProduct
  190 000000A8         DotProduct
  191 000000A8         ; put your code here
  192 000000A8 B5F8            PUSH             {R3-R7,LR}
  193 000000AA 4603            MOV              R3,R0       ;
  194 000000AC 460C            MOV              R4,R1       ;
  195 000000AE 4615            MOV              R5,R2       ;
  196 000000B0 F04F 0600       MOV              R6,#0       ; NO REASON TO USE
  197 000000B4 F04F 0700       MOV              R7,#0       ;
  198 000000B8         
  199 000000B8         DOTLOOP
  200 000000B8 2D00            CMP              R5,#0       ;
  201 000000BA D00B            BEQ              DOTDONE
  202 000000BC 8818            LDRH             R0,[R3]
  203 000000BE 8821            LDRH             R1,[R4]     ;
  204 000000C0 F7FF FFFE       BL               BCDMul      ;
  205 000000C4 4407            ADD              R7,R0       ;
  206 000000C6 F103 0302       ADD              R3,#2       ;
  207 000000CA F104 0402       ADD              R4,#2       ;
  208 000000CE F105 35FF       ADD              R5,#-1      ;
  209 000000D2 E7F1            B                DOTLOOP



ARM Macro Assembler    Page 5 


  210 000000D4         
  211 000000D4         
  212 000000D4         
  213 000000D4         
  214 000000D4         DOTDONE
  215 000000D4 4638            MOV              R0,R7
  216 000000D6         
  217 000000D6 E8BD 40F8       POP              {R3-R7,LR}
  218 000000DA         
  219 000000DA 4770            BX               LR
  220 000000DC                 ALIGN
  221 000000DC                 END
Command Line: --debug --xref --cpu=Cortex-M3 --apcs=interwork --depend=.\exam2.
d -o.\exam2.o -IC:\Keil\ARM\RV31\INC -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\
Inc\Luminary --predefine="__EVAL SETA 1" --list=.\exam2.lst Exam2.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

Data 00000000

Symbol: Data
   Definitions
      At line 8 in file Exam2.s
   Uses
      None
Comment: Data unused
1 symbol



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

.text 00000000

Symbol: .text
   Definitions
      At line 11 in file Exam2.s
   Uses
      None
Comment: .text unused
BCD2Dec 00000014

Symbol: BCD2Dec
   Definitions
      At line 55 in file Exam2.s
   Uses
      At line 54 in file Exam2.s
      At line 127 in file Exam2.s
      At line 132 in file Exam2.s

BCDDONE 00000086

Symbol: BCDDONE
   Definitions
      At line 103 in file Exam2.s
   Uses
      At line 78 in file Exam2.s
Comment: BCDDONE used once
BCDMul 0000008E

Symbol: BCDMul
   Definitions
      At line 123 in file Exam2.s
   Uses
      At line 122 in file Exam2.s
      At line 204 in file Exam2.s

DONE 00000012

Symbol: DONE
   Definitions
      At line 36 in file Exam2.s
   Uses
      At line 33 in file Exam2.s
Comment: DONE used once
DOTDONE 000000D4

Symbol: DOTDONE
   Definitions
      At line 214 in file Exam2.s
   Uses
      At line 201 in file Exam2.s
Comment: DOTDONE used once
DOTLOOP 000000B8

Symbol: DOTLOOP
   Definitions
      At line 199 in file Exam2.s
   Uses
      At line 209 in file Exam2.s
Comment: DOTLOOP used once



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

DotProduct 000000A8

Symbol: DotProduct
   Definitions
      At line 190 in file Exam2.s
   Uses
      At line 189 in file Exam2.s
Comment: DotProduct used once
NEGATIVE 00000052

Symbol: NEGATIVE
   Definitions
      At line 84 in file Exam2.s
   Uses
      At line 61 in file Exam2.s
Comment: NEGATIVE used once
PosOrNeg 00000000

Symbol: PosOrNeg
   Definitions
      At line 27 in file Exam2.s
   Uses
      At line 26 in file Exam2.s
      At line 59 in file Exam2.s

ZERO 0000000E

Symbol: ZERO
   Definitions
      At line 34 in file Exam2.s
   Uses
      At line 31 in file Exam2.s
Comment: ZERO used once
11 symbols
343 symbols in table
