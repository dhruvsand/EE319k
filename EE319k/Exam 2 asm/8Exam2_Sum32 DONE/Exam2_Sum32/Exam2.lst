


ARM Macro Assembler    Page 1 


    1 00000000         ;This is Exam2_Sum32
    2 00000000         ;DHRUV SANDESARA
    3 00000000         ;TO TAKE 35 MINS
    4 00000000         ;Your name goes here
    5 00000000         ;You edit this file only
    6 00000000                 AREA             Data, ALIGN=4
    7 00000000         
    8 00000000         
    9 00000000                 AREA             |.text|, CODE, READONLY, ALIGN=
2
   10 00000000                 THUMB
   11 00000000         ;***** Size subroutine*********************
   12 00000000         ;Determines the number of elements in a variable-length 
                       array
   13 00000000         ;Input:   R0 has a pointer to the array of 32-bit number
                       s
   14 00000000         ;Output:  R0 is returned as the number of data elements 
                       in the array 
   15 00000000         ;Invariables: You must not permanently modify registers 
                       R4 to R11
   16 00000000         ;Error conditions: none
   17 00000000         ;Test cases
   18 00000000         ;Array1 DCD 3,1,2,3                         ;size = 3
   19 00000000         ;Array2 DCD 0xA0000000,1...                 ;size = 0xA0
                       000000
   20 00000000         ;Array3 DCD 0                               ;size = 0
   21 00000000                 EXPORT           Size
   22 00000000         Size
   23 00000000         ; put your code here
   24 00000000 6800            LDR              R0,[R0]     ;
   25 00000002         
   26 00000002         
   27 00000002         
   28 00000002 4770            BX               LR
   29 00000004         
   30 00000004         ;***** Count subroutine*********************
   31 00000004         ;Determine the number of times that a data value occurs 
                       in a given array
   32 00000004         ;Inputs:  R0 has a pointer to the array of 32-bit number
                       s
   33 00000004         ;         R1 is the data value
   34 00000004         ;Output:  R0 is the number of times the data value occur
                       s in the array
   35 00000004         ;Invariables: You must not permanently modify registers 
                       R4 to R11
   36 00000004         ;Error conditions: none
   37 00000004         ;Test cases
   38 00000004         ;Array1 DCD 3,1,2,3             ;Data=4   Count=0 (4 occ
                       urs 0 times)
   39 00000004         ;Array2 DCD 5,12,13,4,12,3      ;Data=12  Count=2 (12 oc
                       curs twice)
   40 00000004         ;Array3 DCD 12,1,1,1,2,1,1,2,1,2,1,2,1,1,1      ;Data=1 
                        Count=8 (1 occurs 8 times)
   41 00000004         ;Array4 DCD 9,300,300,300,300,300,300,300,300,300  ;Data
                       =300  Count=9 (300 occurs 9 times)
   42 00000004         ;Array5 DCD 7,500000,10,500000,10,500000,0,0 ;Data=50000
                       0   Count=3 (500000 occurs 3 times)
   43 00000004         ;Array6 DCD 0           ;Data=0 Count=0 (0 does not occu
                       r in the empty array)



ARM Macro Assembler    Page 2 


   44 00000004                 EXPORT           Count
   45 00000004         Count
   46 00000004         ; put your code here
   47 00000004 B51C            PUSH             {R2-R4,LR}
   48 00000006 4602            MOV              R2,R0       ; R2 HAS THE POINTE
                                                            R
   49 00000008 F04F 0300       MOV              R3,#0       ; R3 HAS THE COUNT
   50 0000000C F7FF FFFE       BL               Size        ; R0 HAS THE SIZE
   51 00000010 F102 0204       ADD              R2,#4       ;
   52 00000014         COUNTLOOP
   53 00000014 6814            LDR              R4,[R2]     ; R4 HAS THE DATA
   54 00000016 2800            CMP              R0,#0       ; R0 HAS THE SIZE
   55 00000018 D008            BEQ              COUNTDONE
   56 0000001A 42A1            CMP              R1,R4       ;
   57 0000001C D101            BNE              COUNTSKIP
   58 0000001E F103 0301       ADD              R3,#1       ;
   59 00000022         
   60 00000022         COUNTSKIP
   61 00000022 F102 0204       ADD              R2,#4       ;
   62 00000026 F100 30FF       ADD              R0,#-1      ;
   63 0000002A E7F3            B                COUNTLOOP   ;
   64 0000002C         
   65 0000002C         
   66 0000002C         COUNTDONE
   67 0000002C 4618            MOV              R0,R3       ;
   68 0000002E         
   69 0000002E E8BD 401C       POP              {R2-R4,LR}
   70 00000032         
   71 00000032 4770            BX               LR
   72 00000034         DATA
   73 00000034 7FFFFFFF        DCD              0x7FFFFFFF  ;  
   74 00000038         
   75 00000038         ;***** Sum subroutine *********************
   76 00000038         ;Add up all values in the array
   77 00000038         ;Inputs:  R0 has a pointer to the array of 32-bit signed
                        numbers
   78 00000038         ;Output:  R0 is the sum of all the values
   79 00000038         ;  set R0 to 0x7FFFFFFF if there is any overflow during 
                       calculations
   80 00000038         ;Invariables: You must not permanently modify registers 
                       R4 to R11
   81 00000038         ;test cases
   82 00000038         ;Array1 DCD 3,1,2,3              ;Sum=1+2+3=6
   83 00000038         ;Array2 DCD 5,-12,-13,-4,-12,-3  ;Sum=-12-13-4-12-3=-44
   84 00000038         ;Array3 DCD 14,1,1,1,2,1,1,2,1,2,1,2,1,1,1         ;Sum=
                       18
   85 00000038         ;Array4 DCD 4,0xD0000000,0xC0000000,0xE0000000,0   ;Sum=
                       0x7FFFFFFF
   86 00000038         ;Array5 DCD 4,0x30000000,0x40000000,0x20000000,0   ;Sum=
                       0x7FFFFFFF
   87 00000038         ;Array6 DCD 0           ;Sum=0 (empty array)
   88 00000038                 EXPORT           Sum
   89 00000038         Sum
   90 00000038         ; put your code here
   91 00000038 B5FE            PUSH             {R1-R7,LR}
   92 0000003A 4601            MOV              R1,R0       ; r1 is now the poi
                                                            nter of where the s
                                                            tuff is 
   93 0000003C 6802            LDR              R2,[R0]     ; R2 HAS THE COUNT



ARM Macro Assembler    Page 3 


   94 0000003E F100 0004       ADD              R0,#4       ;
   95 00000042 F04F 0300       MOV              R3,#0       ; R3 HAS THE SUM OF
                                                             COUNT
   96 00000046         SUMLOOP
   97 00000046 6801            LDR              R1,[R0]     ; R1 HAS THE DATA
   98 00000048 2A00            CMP              R2,#0       ;
   99 0000004A D009            BEQ              SUMNORMALDONE ;
  100 0000004C 185B            ADDS             R3,R1
  101 0000004E D604            BVS              OVERFLOW
  102 00000050 F100 0004       ADD              R0,#4       ;
  103 00000054 F102 32FF       ADD              R2,#-1      ;
  104 00000058 E7F5            B                SUMLOOP
  105 0000005A         
  106 0000005A         
  107 0000005A         OVERFLOW
  108 0000005A 4804            LDR              R0,=DATA    ;
  109 0000005C 6800            LDR              R0,[R0]
  110 0000005E E001            B                SUMDONE
  111 00000060         
  112 00000060         SUMNORMALDONE
  113 00000060 4618            MOV              R0,R3       ;
  114 00000062 E7FF            B                SUMDONE
  115 00000064         SUMDONE
  116 00000064 E8BD 40FE       POP              {R1-R7,LR}
  117 00000068         
  118 00000068 4770            BX               LR
  119 0000006A         
  120 0000006A 00 00           ALIGN
  121 0000006C                 END
              00000000 
Command Line: --debug --xref --cpu=Cortex-M3 --apcs=interwork --depend=.\exam2.
d -o.\exam2.o -IC:\Keil\ARM\RV31\INC -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\
Inc\Luminary --predefine="__EVAL SETA 1" --list=.\exam2.lst Exam2.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

Data 00000000

Symbol: Data
   Definitions
      At line 6 in file Exam2.s
   Uses
      None
Comment: Data unused
1 symbol



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

.text 00000000

Symbol: .text
   Definitions
      At line 9 in file Exam2.s
   Uses
      None
Comment: .text unused
COUNTDONE 0000002C

Symbol: COUNTDONE
   Definitions
      At line 66 in file Exam2.s
   Uses
      At line 55 in file Exam2.s
Comment: COUNTDONE used once
COUNTLOOP 00000014

Symbol: COUNTLOOP
   Definitions
      At line 52 in file Exam2.s
   Uses
      At line 63 in file Exam2.s
Comment: COUNTLOOP used once
COUNTSKIP 00000022

Symbol: COUNTSKIP
   Definitions
      At line 60 in file Exam2.s
   Uses
      At line 57 in file Exam2.s
Comment: COUNTSKIP used once
Count 00000004

Symbol: Count
   Definitions
      At line 45 in file Exam2.s
   Uses
      At line 44 in file Exam2.s
Comment: Count used once
DATA 00000034

Symbol: DATA
   Definitions
      At line 72 in file Exam2.s
   Uses
      At line 108 in file Exam2.s
Comment: DATA used once
OVERFLOW 0000005A

Symbol: OVERFLOW
   Definitions
      At line 107 in file Exam2.s
   Uses
      At line 101 in file Exam2.s
Comment: OVERFLOW used once
SUMDONE 00000064

Symbol: SUMDONE



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

   Definitions
      At line 115 in file Exam2.s
   Uses
      At line 110 in file Exam2.s
      At line 114 in file Exam2.s

SUMLOOP 00000046

Symbol: SUMLOOP
   Definitions
      At line 96 in file Exam2.s
   Uses
      At line 104 in file Exam2.s
Comment: SUMLOOP used once
SUMNORMALDONE 00000060

Symbol: SUMNORMALDONE
   Definitions
      At line 112 in file Exam2.s
   Uses
      At line 99 in file Exam2.s
Comment: SUMNORMALDONE used once
Size 00000000

Symbol: Size
   Definitions
      At line 22 in file Exam2.s
   Uses
      At line 21 in file Exam2.s
      At line 50 in file Exam2.s

Sum 00000038

Symbol: Sum
   Definitions
      At line 89 in file Exam2.s
   Uses
      At line 88 in file Exam2.s
Comment: Sum used once
12 symbols
346 symbols in table
